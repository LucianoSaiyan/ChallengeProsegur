@page "/fetchdata"
@using ChallengeProsegur.Shared
@using ChallengeProsegur.Shared.Domain;
@using System.Diagnostics;
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<h3><em>@nameof(Demora)</em></h3>
<p><em>@Demora</em></p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Error != null)
{
    <h3><em>@nameof(Error)</em></h3>
    <p><em>@Error</em></p>
}

@code {
    private WeatherForecast[]? forecasts;
    //private Usuario[]? Usuario;
    private string Error { get; set; }
    private string Demora { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {            
            //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
            await GetUsers();
        }
        catch(Exception ex)
        {
            Error = ex.ToString();
        }
    }


    async Task GetUsers()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        //Usuario = await Http.GetFromJsonAsync<Usuario[]>("Usuarios");
        stopwatch.Stop();
        Demora = $"TotalSeconds : {stopwatch.Elapsed.TotalSeconds} --- TotalMilliseconds : {stopwatch.Elapsed.TotalMilliseconds}";
    }

}
