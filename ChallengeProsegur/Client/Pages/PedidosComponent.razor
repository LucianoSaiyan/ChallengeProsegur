@using ChallengeProsegur.Shared.DTOs;
@using System.Diagnostics;
@using ChallengeProsegur.Shared
@using ChallengeProsegur.Shared.Domain;
@* @page "/userspedidos/{id}" *@
@inject HttpClient Http

<PageTitle>Pedidos de Usuario</PageTitle>

@if (pedidoDTO == null)
{
    <p><em>Loading...</em></p>
}
else if (pedidoDTO.Count() == 0)
{
    <p><em>No existen registros</em></p>
}
else
{
    <h4><em>El Servicio de USuario @nameof(Demora)</em></h4>
    <p><em>@Demora</em></p>
    <table class="table">
        <thead>
            <tr>
                @for (int i = 0; i < propertyInfos.Length; i++)
                {
                    <th>@propertyInfos[i].Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var pedido in pedidoDTO)
            {
                <tr>
                    <td>@pedido.Id</td>
                    <td>@pedido.FechaCreacion</td>
                    <td>@pedido.Estado</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Error != null)
{
    <h3><em>@nameof(Error)</em></h3>
    <p><em>@Error</em></p>
}


@code {
    [Parameter] public PedidoDTO[] pedidoDTO { get; set; }

    private PropertyInfo[] propertyInfos { get; set; }
    private string Error { get; set; }
    private string Demora { get; set; }
    //objeto que obtiene el response del servicio
    private ResponseService<PedidoDTO[]> responseService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {            
            propertyInfos = Methods.GetProperties_from_Generic_Object<PedidoDTO>(new PedidoDTO());
            await Timer();
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }

    async Task Timer()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        //String rrresponseService = await Http.GetStringAsync("Usuarios");
        //responseService = Methods.genericDeserializerObject<ResponseService<PedidoDTO[]>>(rrresponseService);

        stopwatch.Stop();
        Demora = $"TotalSeconds : {stopwatch.Elapsed.TotalSeconds} --- TotalMilliseconds : {stopwatch.Elapsed.TotalMilliseconds}";
    }

}
