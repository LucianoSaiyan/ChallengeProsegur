@page "/users"
@using ChallengeProsegur.Shared
@using ChallengeProsegur.Shared.DTOs;
@using ChallengeProsegur.Shared.Domain;
@using System.Diagnostics;
@using System.Text.Json.Serialization;
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Usuarios</PageTitle>


@if (ShowPedidosComponent)
{
    <h4><em>El Servicio de USuario @nameof(Demora)</em></h4>
    <p><em>@Demora</em></p>
    @if (UsuariosResponse == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (UsuariosResponse.Length == 0)
    {
        <p><em>No existen registros</em></p>
    }
    else
    {
        <div class="col-10">
            <table class="table">
                <thead>
                    <tr>
                        @for (int i = 0; i < propertyInfos.Length; i++)
                        {
                            <th>@propertyInfos[i].Name</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in UsuariosResponse)
                    {
                        <tr>
                            <td>@usuario.Id</td>
                            <td>@usuario.Nombre</td>
                            <td>@usuario.Direccion</td>
                            <td>@usuario.InformacionContacto</td>
                            <td>
                                @if (usuario?.Pedidos?.Any() == true)
                                {
                                    @* <td> *@
                                    <button class="btn btn-info"
                                    @onclick="() => ShowPedidosFromIdUsers(usuario.Id)">
                                        <span class="oi oi-arrow mr-2" aria-hidden="true">Ver los @usuario?.Pedidos.Count.ToString() Pedidos</span>
                                    </button>
                                    @* </td> *@
                                    @* <NavLink class="nav-link" href="userspedidos">
                    <span class="oi oi-plus" aria-hidden="true"></span> @usuario?.Pedidos.Count
                    </NavLink> *@
                                }
                                else
                                {
                                    <span>@usuario?.Pedidos.Count</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}
else
{
    @* se agrega el componente de Pedidos para reutilizar los datos que obtuvimos
        desde el servicio que invocamos para evitar hacer llamados innecesarios *@
    <div class="col-10">
        <button class="btn btn-info"
        @onclick="() => ShowPedidos()">
            <span class="oi oi-trash mr-2" aria-hidden="true">Ver Listado de Usuarios</span>
        </button>
    </div>
    <div>
        <PedidosComponent pedidoDTO="@UsuarioPedidoDTOTemp"></PedidosComponent>
    </div>
}

@if (Error != null)
{
    <h3><em>@nameof(Error)</em></h3>
    <p><em>@Error</em></p>
}


@code {

    #region Variables Inicializador
    UsuariosDTO[]? UsuariosResponse;
    private string Error { get; set; }
    private string Demora { get; set; }
    private PropertyInfo[] propertyInfos { get; set; }
    private ResponseService<object> responseService { get; set; }
    #endregion

    #region Pedidos del Usuario

    private bool ShowPedidosComponent { get; set; } = true;
    PedidoDTO[] UsuarioPedidoDTO;
    PedidoDTO[] UsuarioPedidoDTOTemp;

    #endregion

    #region Metodos de Carga de pagina

    protected override async Task OnInitializedAsync()
    {
        try
        {
            propertyInfos = Methods.GetProperties_from_Generic_Object<UsuariosDTO>(new UsuariosDTO());
            await GetUsers();
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }

    async Task GetUsers()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        String rrresponseService = await Http.GetStringAsync("Usuarios");
        UsuariosResponse = JsonConvert.DeserializeObject<ResponseService<List<UsuariosDTO>>>(rrresponseService).Data.ToArray();
        //UsuariosResponse = Methods.genericDeserializerObject<ResponseService<List<UsuariosDTO>>>(rrresponseService).Data.ToArray();
        stopwatch.Stop();
        Demora = $"TotalSeconds : {stopwatch.Elapsed.TotalSeconds} --- TotalMilliseconds : {stopwatch.Elapsed.TotalMilliseconds}";
    }

    async Task ShowPedidos()
    {
        try
        {

            UsuarioPedidoDTOTemp = null;
            ShowPedidosComponent = !ShowPedidosComponent;
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }

    async Task ShowPedidosFromIdUsers(int iduser)
    {
        try
        {
            //se arma un array 
            UsuarioPedidoDTOTemp = UsuariosResponse.FirstOrDefault(c => c.Id == iduser).Pedidos.ToArray();
            ShowPedidosComponent = !ShowPedidosComponent;
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }

    }

    #endregion


    protected async Task navegar(int id)
    {
        NavigationManager.NavigateTo($"/userspedidos/{id}");
    }



}
